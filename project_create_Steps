Customizing an Ubuntu ISO with an autoinstall configuration involves several steps and requires some specific tools. The process allows you to create an Ubuntu installation ISO that automatically applies your configuration without manual input during the installation.

Step 1: Create an Autoinstall Configuration File
Create a YAML Configuration File: This file will contain your autoinstall settings.

Here's a basic example of what this file (autoinstall.yaml) might look like:

yaml
Copy code
#cloud-config
autoinstall:
  version: 1
  locale: en_US
  keyboard:
    layout: en
    variant: us
  network:
    network:
      version: 2
      ethernets:
        enp0s25:
          dhcp4: true
  identity:
    hostname: ubuntu-vm
    username: ubuntuuser
    password: $6$exDY1mhS4KUYCE/2$z4mrzC6W.o9G6Pc3HCy/sJk8n2DALEr7lzQuGK4G6P0DQRSNExKAKww9kq9Ue2uuY.cp8RKi/er7rF5/GmXXF0
  ssh:
    install-server: true
    allow-pw: true
  storage:
    layout:
      name: lvm
  packages:
    - curl
    - vim
    - git
Replace the values with those suitable for your needs. The password field should be a hashed password which you can generate using the command mkpasswd --method=sha-512.

Step 2: Prepare the Custom ISO
Download the Ubuntu Server ISO: Download the ISO for Ubuntu Server 22.04 (or the version you wish to install) from the Ubuntu releases page.

Mount the ISO: Create a directory and mount the ISO to it (you'll need to do this as root):

bash
Copy code
mkdir /mnt/ubuntu-iso
mount -o loop ubuntu-22.04-server-amd64.iso /mnt/ubuntu-iso
Copy the ISO Contents: Copy the content of the ISO to a working directory:

bash
Copy code
mkdir ~/custom-ubuntu-iso
cp -rT /mnt/ubuntu-iso ~/custom-ubuntu-iso
Add the Autoinstall File: Place your autoinstall.yaml file into the root of the extracted ISO content.

Modify the GRUB Configuration: Edit the boot/grub/grub.cfg file in the extracted ISO content. Find the menu entry for installing Ubuntu and modify the linux line to include your autoinstall config, by adding autoinstall ds=nocloud-net;s=/cdrom/.

Step 3: Create the New ISO
Repackage the ISO: Use a tool like mkisofs or genisoimage to create a new ISO from the modified content:

bash
Copy code
mkisofs -D -r -V "CUSTOM_UBUNTU" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o custom-ubuntu-22.04.iso ~/custom-ubuntu-iso
Step 4: Use the Custom ISO with Vagrant
Vagrant Box with Custom ISO: Modify your Vagrantfile to use the new custom ISO:

ruby
Copy code
Vagrant.configure("2") do |config|
  config.vm.box = "generic/ubuntu2204"
  config.vm.box_url = "file:///path/to/custom-ubuntu-22.04.iso"
  # ... other configurations ...
end
Replace /path/to/custom-ubuntu-22.04.iso with the actual path to your new ISO file.

Additional Notes
Testing: Thoroughly test the new ISO in a safe environment to ensure it installs Ubuntu as expected without manual intervention.
Root Privileges: Some of these steps (like mounting the ISO) require root privileges.
Vagrant Box Compatibility: Ensure that your Vagrant setup is compatible with using a custom ISO. This may require additional configuration.
SSH Access: If you need SSH access to the installed system, ensure that your autoinstall configuration includes setting up an SSH server.
This process can be quite involved and may require adjustments based on your specific environment and requirements.
